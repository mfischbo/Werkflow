package de.artignition.werkflow.demon;

import de.artignition.werkflow.domain.PluginInstance;
import de.artignition.werkflow.plugin.Plugin;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.Map;

public class PluginExecutionPreparator  {

	public static Plugin prepare(PluginInstance instance) throws ClassNotFoundException, NoSuchMethodException, SecurityException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
	
		Plugin retval = null;
		
		// create a instance of the actual piece of code
		Class<?> c = Class.forName(instance.getJobPlugin().getClassname());
		Class<?>[] ifaces = c.getInterfaces();
		boolean isPlugin = false;
		for (Class<?> iface : ifaces) {
			if (iface == Plugin.class) {
				isPlugin = true;
				break;
			}
		}
		
		if (!isPlugin)
			throw new RuntimeException("The provided class : " + c.getCanonicalName() + " does not implement " + Plugin.class.getCanonicalName());
	
		Constructor constructor = c.getConstructor();
		retval = (Plugin) constructor.newInstance();

		boolean parametersSet = setParameters(c, retval, instance.getParameters());
		
		
		return retval;
	}
	
	
	private static boolean setParameters(Class<?> c, Plugin instance, Map<String, String> parameters) {

		// TODO: Review this. Use reflections or something
		/*
		for (Field f : c.getDeclaredFields()) {
			Annotation[] ans = f.getAnnotations();
			for (Annotation a : ans) {
				if (a.getClass() == PluginParameters.class) {
					try {
						f.set(instance, parameters);
						return true;
					} catch (Exception ex) {
						ex.printStackTrace();
						// TODO: Add Logger here
						return false;
					}
				}
			}
		}
		*/
		return true;
	}
}
