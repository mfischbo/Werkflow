package de.artignition.werkflow.client.controller;

import de.artignition.werkflow.client.component.PluginEntry;
import de.artignition.werkflow.client.service.PluginDescriptorService;
import de.artignition.werkflow.dto.ConnectionDescriptor;
import de.artignition.werkflow.dto.PluginDescriptor;

import java.net.URL;
import java.util.ResourceBundle;

import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.image.Image;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.VBox;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;

@Controller
public class JobEditController extends StageController implements Initializable, EventHandler<MouseEvent> {

	@Autowired
	private PluginDescriptorService			service;
	
	@FXML
	private VBox		pluginsContentBox;
	
	@FXML
	private Button		btnTestController;
	
	@FXML private Label		lblSelPlgName;
	@FXML private Label		lblSelPlgDesc;
	@FXML private Label		lblSelPlgNumIns;
	@FXML private Label		lblSelPlgTypesIn;
	@FXML private Label		lblSelPlgNumOuts;
	@FXML private Label		lblSelPlgTypesOut;
	
	
	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		log.info("Initializing job edit controller");
	
		try {
			PluginDescriptor[] plugins = service.getAllPlugins();
			for (PluginDescriptor p : plugins) {
				PluginEntry e = new PluginEntry();
				e.setLabel(p.getName());
				e.setIcon(new Image("/Plugin.png", true));
				e.setOnMouseClicked(this);
				e.setClassname(p.getClassname());
				pluginsContentBox.getChildren().add(e);
			}
			
		} catch (Exception ex) {
			log.error("An error occured inserting the plugins. Cause: " + ex.getMessage());
		}
	}

	
	public void testController(ActionEvent e) {
		try {
			
		} catch (Exception ex) {
			log.error(ex.getMessage());
		}
	}


	@Override
	public void handle(MouseEvent e) {
		if (e.getSource() instanceof PluginEntry) {
			PluginEntry selected = (PluginEntry) e.getSource();
			selected.setSelected(true);
			
			PluginDescriptor pd = service.getPluginByClassName(selected.getClassname());
			this.lblSelPlgName.setText(selected.getLabel());
			this.lblSelPlgDesc.setText(pd.getDescription());
			this.lblSelPlgNumIns.setText(pd.getInputs().length + "");
			this.lblSelPlgNumOuts.setText(pd.getOutputs().length + "");
		
			StringBuffer b = new StringBuffer();
			for (ConnectionDescriptor d : pd.getInputs())
				b.append(d.getType()).append(" ");
			this.lblSelPlgTypesIn.setText(b.toString());
			
			b = new StringBuffer();
			for (ConnectionDescriptor d : pd.getOutputs())
				b.append(d.getType()).append(" ");
			this.lblSelPlgTypesOut.setText(b.toString());
		}
	}
}
