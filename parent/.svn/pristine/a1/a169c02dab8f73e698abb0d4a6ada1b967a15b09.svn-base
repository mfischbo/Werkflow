package de.artignition.werkflow.engine.test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import de.artignition.werkflow.demon.PluginExecutionProxy;
import de.artignition.werkflow.domain.Connection;
import de.artignition.werkflow.domain.JobDescriptor;
import de.artignition.werkflow.domain.JobPlugin;
import de.artignition.werkflow.domain.PluginInstance;
import de.artignition.werkflow.domain.WorkItem;
import de.artignition.werkflow.plugin.PluginExecutionState;

import java.io.ByteArrayOutputStream;
import java.io.ObjectOutputStream;
import java.util.UUID;

import org.junit.Before;
import org.junit.Test;

public class PluginExecutionProxyTest {

	private PluginInstance fixture;
	
	@Before
	public void setupFixture() {
		
		this.fixture = new PluginInstance();
		fixture.setId(UUID.randomUUID());
		fixture.setState(PluginExecutionState.IDLE);
		fixture.setStepCount(0);
		
		JobPlugin p = new JobPlugin();
		p.setId(UUID.randomUUID());
		p.setClassname(MockPlugin.class.getCanonicalName());
		p.setX(0);
		p.setY(0);
		p.setJobDescriptor(new JobDescriptor());
		
		p.getParameters().put("username", "foo".getBytes());
		p.getParameters().put("password", "bar".getBytes());
		this.fixture.setJobPlugin(p);
	
		Connection from1 = new Connection();
		from1.setId(UUID.randomUUID());
		from1.setSourcePort(1);
		from1.setTargetPort(1);
		
		Connection from2 = new Connection();
		from2.setId(UUID.randomUUID());
		from2.setSourcePort(2);
		from2.setTargetPort(2);
		
		p.getInboundConnections().add(from1);
		p.getInboundConnections().add(from2);
	}
	
	
	@Test
	public void initializesPluginCorrectly() throws Exception {
		PluginExecutionProxy p = new PluginExecutionProxy(this.fixture);
		p.initializePlugin();
		assertNotNull(p.getPlugin());
		assertEquals(MockPlugin.class.getCanonicalName(), p.getPlugin().getClass().getCanonicalName());
	}
	
	@Test(expected = RuntimeException.class)
	public void failsIfNotPluginImplementation() throws Exception {
		PluginExecutionProxy p = new PluginExecutionProxy(this.fixture);
		this.fixture.getJobPlugin().setClassname(getClass().getCanonicalName());
		p.initializePlugin();
	}


	@Test
	public void setsMultipleInputsCorrectly() throws Exception {

		PluginExecutionProxy p = new PluginExecutionProxy(this.fixture);
		p.initializePlugin();
		
		WorkItem[] ins = new WorkItem[2];
		WorkItem i1 = new WorkItem();
		i1.setId(UUID.randomUUID());
		i1.setObject(new ComplexInputGraph());
		
		ByteArrayOutputStream bout = new ByteArrayOutputStream();
		ObjectOutputStream out = new ObjectOutputStream(bout);
		out.writeObject(i1.getObject()); 
		i1.setPayload(bout.toByteArray());
		
		i1.setOwner(this.fixture);
		i1.setSourceOutput(1);
		ins[0] = i1;
		
		WorkItem i2 = new WorkItem();
		i2.setId(UUID.randomUUID());
		i2.setObject(new ComplexInputGraph());
		bout = new ByteArrayOutputStream();
		out =  new ObjectOutputStream(bout);
		out.writeObject(i2.getObject());
		i2.setPayload(bout.toByteArray());
		
		i2.setOwner(this.fixture);
		i2.setSourceOutput(2);
		ins[1] = i2;
		
		p.setInputs(ins);
	}


	@Test(expected = RuntimeException.class)
	public void throwsExceptionOnUnassignableInput() throws Exception {
		PluginExecutionProxy p = new PluginExecutionProxy(this.fixture);
		p.initializePlugin();
		
		WorkItem[] ins = new WorkItem[2];
		WorkItem i1 = new WorkItem();
		i1.setId(UUID.randomUUID());
		
		String o = new String("Hello World 1");
		i1.setObject(o);
		i1.setPayload(o.getBytes());
		i1.setOwner(this.fixture);
		i1.setSourceOutput(1);
		ins[0] = i1;
		
		WorkItem i2 = new WorkItem();
		i2.setId(UUID.randomUUID());
		i2.setObject(o);
		i2.setPayload(o.getBytes());
		i2.setOwner(this.fixture);
		i2.setSourceOutput(2);
		ins[1] = i2;
		
		p.setInputs(ins);	
	}
	
	
	@Test
	public void getMultipleOutputsCorrectly() throws Exception {
		PluginExecutionProxy p = new PluginExecutionProxy(this.fixture);
		p.initializePlugin();
		
		WorkItem[] ins = new WorkItem[2];
		WorkItem i1 = new WorkItem();
		i1.setId(UUID.randomUUID());
		i1.setObject(new ComplexInputGraph());
		
		ByteArrayOutputStream bout = new ByteArrayOutputStream();
		ObjectOutputStream out = new ObjectOutputStream(bout);
		out.writeObject(i1.getObject()); 
		i1.setPayload(bout.toByteArray());
		
		i1.setOwner(this.fixture);
		i1.setSourceOutput(1);
		ins[0] = i1;
		
		WorkItem i2 = new WorkItem();
		i2.setId(UUID.randomUUID());
		i2.setObject(new ComplexInputGraph());
		bout = new ByteArrayOutputStream();
		out =  new ObjectOutputStream(bout);
		out.writeObject(i2.getObject());
		i2.setPayload(bout.toByteArray());
		
		i2.setOwner(this.fixture);
		i2.setSourceOutput(2);
		ins[1] = i2;
		
		p.setInputs(ins);
		p.execute();
		
		WorkItem[] outs = p.getOutput();
		for (WorkItem w : outs) {
			assertNotNull(w.getObject());
			assertEquals(fixture, w.getOwner());
		}
	}
}
